1->

class Solution {
public:
    bool isBalanced(string &s){
        if(s.length()%2!=0) return false;
        stack<char> st ;
        for(int i=0;i<s.length();i++){
            if(s[i]=='(' || s[i] == '[' || s[i] == '{') st.push(s[i]);
            else{ // s[i] = ')'
                if(st.empty()) return false;  // Check if stack is empty before accessing top
                if((st.top() == '(' && s[i] == ')') || 
                   (st.top() == '{' && s[i] == '}') || 
                   (st.top() == '[' && s[i] == ']')) {
                    st.pop();
                } 
                else {
                    return false; // Mismatched parenthesis
                }
            }
        }
        if(st.size()==0) return true;
        else return false;
    }
    bool isValid(string s) {
        return isBalanced(s);
    }
};

2->

class Solution {
public: 
    ListNode* reverse(ListNode* head){
        if(head == NULL || head->next == NULL) return head;
        ListNode* newhead = reverse(head->next);
        head->next->next = head;
        head->next = NULL;
        return newhead;
    }
    vector<int> nextLargerNodes(ListNode* head) {
        stack<int> st;
        vector<int> v;
        ListNode* temp = reverse(head);
        while(temp){
            while(st.size() > 0 && st.top() <= temp->val){
                st.pop();
            }
            if(st.size() == 0) v.push_back(0);
            else v.push_back(st.top());
            st.push(temp->val);
            temp = temp->next;
        }
        std::reverse(v.begin(), v.end());
        return v;
    }
};

3->
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        stack <int> st;
        vector<int> v;
        for(int i = 0; i < prices.size(); i++){
            st.push(prices[i]);
            if(prices[i] > st.top()){
                v.push_back(prices[i] - st.top());
            }
            else{
                int x = i;
                st.pop();
                while(x < prices.size()){
                    if(prices[i] >= prices[x] && i != x){
                        st.push(prices[x]);
                        break;
                    } 
                    x++;
                }
                if(st.size() != 0){
                    v.push_back(prices[i] - st.top());
                    st.pop();
                }
                else v.push_back(prices[i]);
            }
        }
        return v;
    }
};

4->

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int> st;
        vector<int> v;
        int n = nums.size();
        st.push(nums[n-1]);
        for(int i = n-2; i >= 0; i--){
            while(st.size() > 0 && st.top() <= nums[i]){
                st.pop();
            }
            if(st.size() == 0){
                int x = 0;
                while(x < n){
                    if(nums[x] > nums[i]){
                        st.push(nums[x]);
                        break;
                    }
                    x++;
                }
        
            }
            if(st.size() == 0) v.push_back(-1); 
            else v.push_back(st.top());
            st.push(nums[i]);
        }
        std:: reverse(v.begin(), v.end());
        for(int i = 0; i < n; i++){
            if(nums[n-1] < nums[i]){
                v.push_back(nums[i]);
                break;
            }

        }
        if(n == v.size()) return v;
        else v.push_back(-1);
        return v;
    }
};

